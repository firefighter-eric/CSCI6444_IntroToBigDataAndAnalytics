```{r}
library(psych)
library(caret)
library(class)
library(factoextra)
library(car)
```

# read data
```{r}
train <- read.csv("adult.data", header=FALSE, stringsAsFactors = FALSE)
test <- read.csv("adult.test", header=FALSE, stringsAsFactors = FALSE)
title = c("age", "workclass", "fnlwgt", "education", "education_num", "marital_status", "occupation", "relationship", "race", "sex", "capital_gain", "capital_loss", "hours_per_week", "native_country", "label")
names(train) = title
names(test) = title

sub = c("age", "fnlwgt", "education_num", "capital_gain", "capital_loss", "hours_per_week")
sub_label = c("age", "fnlwgt", "education_num", "capital_gain", "capital_loss", "hours_per_week" ,"label")

```

```{r}
test.sub = test[sub]
label<-as.factor(test$label)
label<-as.numeric(as.factor(label))
label<-gsub(1,0,label)
label<-gsub(2,1,label)
label<-as.numeric(label)
test.sub$label<-c(label)
test.sub
```
```{r}
train.sub<-train[sub]
train.sub$work<-as.numeric(as.factor(train$workclass))
train.sub$edcation<-c(as.numeric(as.factor(train$education)))
train.sub$marital<-c(as.numeric(as.factor(train$marital_status)))
train.sub$occupation<-c(as.numeric(as.factor(train$occupation)))
train.sub$relationship<-c(as.numeric(as.factor(train$relationship)))
train.sub$race<-c(as.numeric(as.factor(train$race)))


train.sub

```

## glm()
```{r}


glm = glm(formula = label ~ age+ fnlwgt + education_num +capital_gain + capital_loss + hours_per_week, family = "binomial", data = test.sub )

summary(glm)

```
##lm()
```{r}

lm = lm(formula = age ~ fnlwgt + education_num +capital_gain + capital_loss + hours_per_week, data = train.x.norm)
summary(lm)
```

##iclust
```{r}

train.label<-as.factor(train$label)
train.label<-as.numeric(as.factor(train.label))
train.label<-gsub(1,0,train.label)
train.label<-gsub(2,1,train.label)
train.label<-as.numeric(train.label)
train.sub$label<-c(train.label)
train.sub

for (k in 2: 10)
iclust = ICLUST(train.sub, nclusters=k)

#ICLUST(train.x, nclusters=0, alpha=3, beta=1, beta.size=4, alpha.size=3,correct=TRUE, reverse=TRUE, beta.min=.5, output=1, digits=2,labels=NULL,cut=0,n.iterations = 0,title="ICLUST")
#ICLUST(r.mat)    #use all defaults
#ICLUST(r.mat,nclusters =3)    #use all defaults and if possible stop at 3 clusters
```
